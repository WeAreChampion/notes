--Java有四种类型的垃圾回收器：
1.串行垃圾回收器(Serial Garbage Collector)
2.并行垃圾回收器(Parallel Garbage Collector)
3.并发标记扫描垃圾回收器(CMS Garbage Collector)
4.G1垃圾回收器(G1 Garbage Collector)

--Stop the World
独占式的垃圾回收，整个应用程序会被停止，直到垃圾回收的完成。

--新生代川航收集器
# 在HotSpot虚拟机中，指定使用新生代串行收集器和老年代串行收集器
-XX:+UseSerialGC

--老年代串行收集器
# 在HotSpot虚拟机中，指定使用新生代串行收集器和老年代串行收集器
-XX:+UseSerialGC
# 新生代使用并行收集器，老年代使用串行收集器
-XX:+UseParNewGC
# 新生代使用并行回收器，老年代使用串行收集器
-XX:+UseParallelGC

--并行收集器
# 新生代使用并行回收器，老年代使用串行收集器
-XX:+UseParNewGC
# 新生代使用并行收集器，老年代使用CMS
-XX:+UseConcMarkSweepGC

--新生代并行回收
# 新生代使用并行回收器，老年代使用串行收集器
-XX:+UseParallelGC
# 新生代与老年代都使用并行收集器
-XX:+UseParallelOldGC

--并行回收收集器两个重要参数用于控制系统的吞吐量
# 设置最大垃圾收集停顿时间，值是一个大于0的整数
-XX:MaxGCPauseMillis
# 设置吞吐量大小，值是一个0-100之间的整数
# 假设为n，则系统将花费不超过1/(n+1)*100%的时间用于垃圾收集
-XX:GCTimeRatio
# 支持自适应的GC调节策略，开发方式
#该模式下，新生代大小、eden和survivor的比例、晋升老年代的对象年龄等参数都会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点
-XX:+UseAdaptiveSizePolicy

--老年代并行回收器
# 新生代与老年代都使用并行收集器，对吞吐量敏感的系统可以考虑使用
-XX:+UseParallelOldGC
# 设置垃圾回收时的线程数量
# 一般，最后与CPU数量相当，避免过多的线程数，影响垃圾收集性能
# 默认情况下，当CPU数量小于8个时，ParallelGCThreads的值等于CPU数量；当CPU数量大于8个时，值等于3+[(5*CPU_COUNT)/8]
-XX:ParallelGCThreads

--CMS收集器(Concurrent Mark Sweep)
与并行回收器不同，CMS收集器主要关注于系统的停顿时间。为并发标记清除，从名称上就可以得知，它使用的是标记-清除算法，同时它又是一个使用多线程并行回收的垃圾收集器。CMS收集器的工作过程与其他垃圾收集器相比，略显复杂。工作步骤主要有:初始标记、并发标记、重新标记、并发清除和并发重置。其中初始标记和重新标记是独占系统资源的。而并发标记、并发清除和并发重置说可以与用户线程一起执行的。整体上，CSM收集不是独占式，可以在应用程序运行过程中进行垃圾回收。
# 设定CMS的线程数量
-XX:ParallelCMSThreads

# 回收阈值，默认值68,即当老年代的空间使用率达到68%时，会执行一次CMS回收；
#如果应用程序的内存使用率增长很快，在CMS的执行过程中，已经出现了内存不足的情况，此时CMS回收就会失败，JVM将启动老年代串行收集器进行垃圾回收；如果是这样，应用程序将完全中断，直到垃圾收集完成，这时应用程序停顿的时间可能比较长。
-XX:CMSInitiatingOccupancyFraction

--G1收集器(Garbage First)
在吞吐量和停顿控制上，预期要优于CMS收集器。与CMS相比，G1收集器是基于标记-压缩算法的，不会产生碎片，也没有必要在收集完成后，进行一次独占式的碎片整理。可以进行停顿，指定在长度为M的时间段中，垃圾回收时间不超过N。

# 启用GC
-XX:+UnlockExperimentalVMOptions -XX:+UseG1GC

# 设置G1回收器的目标停顿时间
# 指定在200ms内，停顿时间不超过50ms
-XX:MaxGCPauseMillis=50
-XX:GCPauseIntervalMillis=200