--与串行回收器相关的参数
# 在HotSpot虚拟机中，指定使用新生代串行收集器和老年代串行收集器
-XX:+UseSerialGC

# 设置eden区大小与survivor区大小的比例
-XX:SurvivorRatio

# 设置大对象直接进入老年代的阈值。当对象的大小超过这个值时，将直接在老年代分配。
-XX:PretenureSizeThreshold

# 设置对象进入老年代年龄的最大值。每一次MinorGC后，对象年龄加1。任何大于这个年龄的对象，一定会进入老年代。
-XX:MaxTenuringThreshold

--与并行GC相关的参数
# 在新生代使用并行收集器
-XX:+UseParNewGC

# 新生代与老年代都使用并行收集器，对吞吐量敏感的系统可以考虑使用
-XX:+UseParallelOldGC

# 设置垃圾回收的线程数，通常情况下可以和cpu数量相等，在cpu较多的情况下，设置相等较小的数值也是合理的
-XX:ParallelGCThreads

#设置最大垃圾收集停顿时间。值说一个大于0的整数。收集器在工作时，会调整java堆大小或者其他一些参数，尽可能把停顿时间控制在MaxGCPauseMillis内
-XX:MaxGCPauseMillis

# 设置吞吐量大小，值是一个0-100之间的整数。假设为n，则系统将花费不超过1/(n+1)*100%的时间用于垃圾收集
-XX:GCTimeRatio

# 支持自适应的GC调节策略，开发方式
#该模式下，新生代大小、eden和survivor的比例、晋升老年代的对象年龄等参数都会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点
-XX:+UseAdaptiveSizePolicy

--与CMS收集器相关的参数
# 新生代使用并行收集器，老年代使用CMS+串行收集器
-XX:+UseConcMarkSweepGC

# 设定CMS的线程数量
-XX:ParallelCMSThreads

# 回收阈值，默认值68,即当老年代的空间使用率达到68%时，会执行一次CMS回收；
#如果应用程序的内存使用率增长很快，在CMS的执行过程中，已经出现了内存不足的情况，此时CMS回收就会失败，JVM将启动老年代串行收集器进行垃圾回收；如果是这样，应用程序将完全中断，直到垃圾收集完成，这时应用程序停顿的时间可能比较长。
-XX:CMSInitiatingOccupancyFraction

# 设置CMS收集器在完成垃圾回收后是否要进行一次碎片的整理
-XX:+UseCMSCompactAtFullCollection

# 设置进行多少次垃圾回收后进行一次内存压缩
-XX:CMSFullGCsBeforeCompaction

# 运行对类元数据进行回收
-XX:+CMSClassUnloadingEnabled

# 启用并进行重标记
-XX:+CMSParallelRemarkEnabled

# 当永久区占用率达到这以百分比后，启动CMS回收。(前提是-XX:+CMSClassUnloadingEnabled激活了)
-XX:CMSInitiatingPermOccupancyFraction

# 表示只在到达阈值的时候，才进行CMS回收
-XX:UseCMSInitiatingOccupancyOnly

# 使用增量模式，比较适合单CPU
-XX:+CMSIncrementalMode


--与G1回收器相关的参数
# 使用G1回收器
-XX:+UseG1GC

# 运行使用实验性参数
-XX:+UnlockExperimentalVMOptions

# 设置最大垃圾收集停顿时间
-XX:MaxGCPauseMillis

# 设置停顿间隔时间
-XX:GCPauseIntervalMillis


--其他参数
# 禁用显示GC
-XX:+DisableExplicitGC