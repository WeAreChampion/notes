---垃圾回收算法
--引用计数法(Reference Counting)
# 实现
对于一个对象A，只要有任何一个对象引用A,则A的引用计数器就加1；当引用失效时，引用计数器就减1.只要对象A的引用计数器的值为0，则对象A就不可能再被引用。
实现简单，只需要为每个对象配备一个整型的计数器即可。
# 问题
引用计数器存在一个严重的问题，即无法处理循环引用的情况。因此，Java的垃圾回收器中没有使用这种算法，单纯的引用计数器法实现垃圾回收是不可行的。

--标记清除算法(Mark-Sweep)
是现代垃圾回收算法的思想基础。分为两个阶段：标记阶段与清除阶段。一种可行的实现是，在标记阶段，首先通过根节点，标记所有从根节点开始的可达对象。因此，未被标记的对象就是未被引用的垃圾对象。在清除阶段，清除所有未被标记的对象。
# 问题
可能产生的最大问题就是空间碎片。
使用标记清除算法对一块连续的内存空间进行回收。从根节点开始，所有的有引用关系的对象均被标记为存活对象。从根节点起，不可达的对象均为垃圾对象。在标记操作完成后，系统回收所有不可达的空间。
回收的空间是不连续的，在对象的堆空间分配过程中，尤其是大对象的内存分配，不连续的内存空间的工作效率要低于连续的空间，这是该算法的最大缺点。

--复制算法(Copying)
与标记清除算法相比，复制算法是一种相对高效的回收方法。核心思想说将原有的内存空间分为两块，每次只使用其中一块，在垃圾回收时，将正在使用的内存中的存活对象复制到未使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。
如果系统中的垃圾对象很多，复制算法需要复制的存活对象数量并不会太大。因此，在真正需要垃圾回收的时刻，复制算法的效率是很高的。又由于对象是在垃圾回收过程中统一被复制到新的内存空间中，因此，可确保回收后的内存空间是没有碎片的。虽有两大优点，但复制算法的代价缺点是将系统内存折半，因此，单纯的辅助算法也很难让人接受。

--应用
1.Java新生代串行垃圾回收器中，使用了复制算法的思想。新生代分为eden空间、from空间和to空间3个部分。from与to块大小相同、地位相等，且可进行角色互换的空间快。from与to空间也称为survivor空间，即幸存者空间，存放未被回收的对象。
2.垃圾回收时，eden空间中存活的对象会被复制到未使用的survivor空间中(假设是to)，正在使用的survivor空间(假设是from)中的年轻对象也会被复制到to空间(大对象，或者老年对象会直接进入老年代，如果to空间已满，则对象也会直接进入老年代)。此时，eden空间和from空间中剩余的对象就是垃圾对象，可以直接清空，to空间则存放此次回收后的存活对象。

--注意
复制算法适用于新生代，因为垃圾对象通常会多余存活对象，复制算法的效果会比较好。

--标记-压缩算法(Mark-Compact)
1.复制算法的高效性是建立在存活对象少、垃圾对象多的前提下。这种情况在年轻代经常发生，但在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本将很高；为此基于老年代垃圾回收，需要使用新的算法。
2.标记-压缩算法是一种老年代的回收算法，模仿标记-清除算法。思想:从根节点开始，对所有可达的对象做一次标记，而后将所有的存活对象压缩到内存的一端，再清理边界外所有的空间。避免了碎片的产生，又不需要两块相同的内存空间，因此性价比比较高。

--增量算法(Incremental Collecting)
Stop the World: FullGC时，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。若垃圾回收时间很长，应用程序将会挂起很久，将严重影响用户体验或者系统的稳定性。
思想：如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，就可以让垃圾收集线程和应用程序线程交替运行。垃圾线程每次只收集一小片区域的内存空间，接着切换应用线程。如此反复，直到垃圾收集完成。

--分代(Generation Collecting)
1.不同的回收算法都有自己独特的优势和特点。根据垃圾回收对象的特性，使用合适的算法回收。

2.分代就是基于这种思想，将内存区间根据内存的特点分成几块，根据每块内存区间的特点，使用不同的回收算法，以提高垃圾回收的效率。

3.以HotSpot虚拟机为例，它将所有的新建对象都放入称为年轻代的内存区域，年轻代的特点是对象朝生夕灭，大约90%的新建对象会被很快回收，因此，年轻代选择效率较高的复制算法。当一个对象经过几次回收后依然存活，对象就会被放入称为老年代的内存空间。在老年代中，几乎所有的对象都是经过几次垃圾回收后依然得以幸存的，因此，可以认为这些对象在一段时间内，甚至在应用程序的整个生命周期中都是常驻内存的。因此对老年代的回收与新生代不同，使用标记-压缩算法，以提高垃圾回收效率。

4.分代的思想被现有的HotSpot虚拟机广泛使用，几乎所有的垃圾回收器都区分年轻代和老年代。