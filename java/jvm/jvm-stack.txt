---本地方法栈与Java虚拟机栈
---虚拟机栈
# Java虚拟机栈也是线程私有的内存空间，它和Java线程在同一时间创建，它保存方法的局部变量、部分结果，并参与方法的调用 和返回
# Java虚拟机栈规范允许Java栈的大小是动态的或者固定的。
# 在Java虚拟机规范中，定义了两种异常与栈空间相关： StackOverflowError(请求的栈深度大于最大可用的栈深度抛出), OutOfMemoryError(Java栈动态扩展，扩展过程中没有足够的内存空间来支持栈的扩展抛出)
# 在Hot Spot虚拟机中，可使用-Xss(like:-Xss1M)参数设置栈的大小。栈的大小直接决定了函数调用的可达深度。

--栈帧
# 虚拟机栈在运行时使用一种叫做栈帧的数据结构保存上下文数据。栈帧中存放了局部变量表、操作数栈、动态连接方法和返回 地址等信息。每一个方法的调用都伴随着入栈操作，相应的方法的返回表示栈帧的出栈操作。
# 函数嵌套调用的次数由栈的大小决定，栈越大，函数嵌套调用的次数越多；对函数而言，参数越多，内部局部变量越多， 栈帧越大，其嵌套调用次数就会减少。 
# 栈帧中，与性能调优关系最为密切的部分就是局部变量表，局部变量表以"字"为单位进行内存的切分，一个字为32位长度，long与 double型的变量，占2个字，其余类型使用占一个字。
# 方法执行时，虚拟机使用局部变量表完成方法的传递，对于非static方法，虚拟机还会降当前对象(this)作为参数通过 局部变量表传递给当前方法。
# 使用 jclasslib 工具可以查看class文件中每个方法所分配的最大局部变量表的容量。

---本地方法栈
# Java虚拟机栈用于管理Java函数的调用
# 本地方法栈用于管理本地方法的调用，本地方法即native方法，用C实现。
# 在SUN的Hot Spot虚拟机中，不区分本地方法栈和虚拟机栈，和虚拟机栈一样，会抛出 StackOverflowError 与 OutOfMemoryError