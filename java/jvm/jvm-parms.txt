---设置最大堆内存
# 设置最大堆内存,use:-Xmx11M
-Xmx11M

---最小堆内存
# 设置最小堆内存，即JVM启动时所占据的操作系统内存大小;
# Java应用程序在运行时，首先会被分配-Xms指定的内存大小，并尽可能尝试在该空间段内运行;
# 当-Xms指定的内存打下确定无法满足应用程序时，JVM才会向操作系统申请更多的内存，直到达到-Xmx指定的内存为止;
# 超过-Xmx时，则抛出 OutOfMemoryError。
# 如果-Xms数值较小，则JVM为了保证系统尽可能在指定内存范围内运行，会增加GC操作，以释放失效的内存空间；
# 从而增加Minor GC和Full GC的次数，对系统性能产生一定的影响。
# JVM 会试图将系统内存尽可能现在在-Xms，当内存触及到-Xms指定的值时，会触发 FullGC，因此把-Xms值设置为-Xmx， 可在系统初期减少 GC的次数和耗时。
-Xms10M

---新生代
# 用于设置新生代的大小
# 设置一个交大的新生代大小会减少老年代的大小，该参数对系统性能及GC行为有很大的影响；
# 新生代的大小一般设置为整个堆空间的1/4-1/3左右。
# Hot Spot虚拟机，-XX:NewSize 用于设置新生代初始大小，-XX:MaxNewSize 用于设置新生代的最大值；通常情况只设置 -Xmn 大小可满足大部分应用程序。
# 设置-Xmm的效果等同于设置了相同的 -XX:NewSize 和 -XX:MaxNewSize。
# 若设置不同的 -XX:NewSize 和 -XX:MaxNewSize 可能会导致内存震荡，从而产生不必要的系统开销。
-Xmn2M

---持久代
# 持久代(方法区)不属于堆的一部分。持久代的大小直接决定系统可以支持多少个类定义和多少常量。
# 设置持久代的初始大小
-XX：PermSize64M
# 设置持久代的最大值
# 一般 MaxPermSize 设置为64M可满足大部分应用程序正常工作，如果永久区依然溢出，可设置为128M；
# 若128 依然满足不了应用程序需求，那对大部分应用程序来说，则应考虑优化系统的设计减少动态类的产生；
# 或者使用前文"方法区"中提到的，利用GC回收部分驻扎在永久区的无用类信息，以使系统健康运行。
-XX:MaxPermSize20M

---线程栈
# 函数嵌套调用的次数由栈的大小决定，栈越大，函数嵌套调用次数越多；
# 对于一个函数，参数越多，内部局部变量越多，栈帧越大，嵌套的调用次数也就越小；-Xss1M:指定JVM的栈的大小1M。
# 线程栈是线程的一块私有空间，使用-Xss参数设置线程栈的大小；
# 线程中进行举报变量分配，函数调用时，都需要在栈中开辟空间。
# Java堆也向OS申请内存空间，如果对空间过大，就会导致OS可用于线程栈的内存减少，从而间接减少程序所能支持的线程数量。
# java.lang.OutOfMemoryError: unable to create new native thread,不是由于堆内存不够而导致的OOM，而是因为OS 内存减去堆内存后，剩余的内存不足而无法创建新的线程。
# 如果系统确实需要大量线程并发执行，那么设置一个较小的堆和较小的栈，有助于提高系统所能承受的最大线程数。
-Xss1M

---堆的比例分配
# -XX:SurvivorRatio : 设置新生代中eden空间和s0空间的比例关系
# s0和s1空间又分别称为 from 空间和 to 空间。他们的大小相同，智能也是一样，并在 Minor GC后，会互换角色。
# -XX:SurvivorRatio=eden/s0=eden/s1
# 指定新生代大小10M，eden区是s0的2倍大小：eden=(10/(1+1+2))*2=5M(s0=s1)
-XX:SurvivorRatio=2
# -XX:NewRatio设置老年代与新生代的比例
-XX:NewRatio=2

# 添加GC打印信息，并保存到相关文件
-XX:+PrintGCDetails -Xloggc:d:\gc.log

---类和对象跟踪
# 用于跟踪类加载情况
-XX:+TraceClassLoading

# 用于跟踪类卸载情况
-XX:+TraceClassUnloading

# 同时跟踪类的加载和卸载信息，可以同时打开这两个开关，或者使用以下参数
-verbose:class

# 跟踪gc信息
-verbose:gc

# 用于打印运行时实例的信息，开关被打开时，当Ctrl+Break被按下，会输出系统内类的统计信息
-XX:+PrintClassHistogram

---控制 GC
# 禁止显示的 GC(System.gc()等显示垃圾回收代码)
-XX:+DisableExplictGC

# 应用程序不需要回收类
-Xnoclassgc

# 程序看不到任何输出，系统不会卸载任何类，类加载程序无法跟踪任何信息
-XX:+TraceClassUnloading -Xnoclassgc

# 系统进行增量式的 GC，增量式的 gc使用特定的算法让GC线程和应用程序线程交叉执行，减少应用程序因GC产生的停顿时间
-Xincgc

---选择类校验器
# 确保class文件的正确与安全，JVM需要通过类校验器对class文件进行校验
# JDK1.6默认开启了新的类校验器，加速类的加载。
# 使用参数指定使用旧的类校验器(是关闭选项)
# 如果新的校验器失败，可以使用老的校验器再次校验
-XX:-UseSplitVerifier

# 关闭再次校验的功能
-XX:-FailOverToOldVerifier

---Solaris下线程控制
# 绑定所有用户线程到内核线程，减少线程进入饥饿状态的次数
-XX:+UseBoundThreads

# 使用内核线程替换线程同步
-XX:+UseLWPSynchronization

# 允许运行时中断线程
-XX:+UseVMInterruptibleIO

---使用大页
# 同样大小的内存空间，使用大页后，内存分页的表项会减少，提高CPU从虚拟内存地址映射到物理内存地址的能力
# 在支持大页的操作系统中，使用JVM参数让虚拟机使用大页，从而提升系统性能
# 启用大页
-XX:+UseLargePages

# 指定大页的大小
-XX:LargePageSizeInBytes

---压缩指针
# 64位机，应用程序占内存远超32位机的(约1.5倍)
# 因为64位操作系统拥有更宽的寻址空间，与32位操作系统相比，指针对象的长度进行了翻倍
# 64位JVM使用参数打开指针压缩，减少内存的消耗
# 可压缩的指针：Class的属性指针(静态成员变量)，对象的属性指针，普通对象数组的每个元素指针
-XX:+UseCompressedOops
