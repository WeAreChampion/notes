Java HotSpot(TM) Client VM (25.65-b01) for windows-x86 JRE (1.8.0_65-b17), built on Oct  6 2015 17:26:22 by "java_re" with MS VC++ 10.0 (VS2010)
Memory: 4k page, physical 3130140k(1138520k free), swap 6258556k(4085688k free)
CommandLine flags: -XX:InitialHeapSize=16777216 -XX:MaxHeapSize=268435456 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:-UseLargePagesIndividualAllocation 

# 0.110表示GC发生的时间，从JVM启动的时候开始算，单位是秒
# [Tenured: 10240K->501K(10944K), 0.0018715 secs] 11092K->501K(15872K)， 8704K->949K(10944K)表示GC前该内存区域已使用容量->GC后该内存区域已使用容量 (该内存区域总容量)，8704K->949K(10944K)表示GC前Java堆已使用容量->GC后Java堆已使用容量(Java堆总容量)。
# GC和FullGC只是表示这次垃圾收集的停顿类型，而不是用来区分新生代GC还是老年代GC的。如果有Full，说明这次 GC 是发生了 Stop-The-World。
0.110: [Full GC (System.gc()) 0.110: [Tenured: 10240K->501K(10944K), 0.0018715 secs] 11092K->501K(15872K), [Metaspace: 1694K->1694K(4480K)], 0.0020665 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 

# [DefNew]、[Tenured]、[Perm]表示GC发生的区域，这里显示的区域名称与使用的GC收集器是密切相关的，例如像上面的收集器 中的新生代名为[Default New Generation]，所以显示的是[DefNew]。如果是ParNew收集器，新生代名称就会变为[ParNew]，意为 [Parallel New Generation]。如果采用Parallel Scavenge收集器，那它配套的新生代称为 [PSYoungGen]，老年代和永久代同理， 名称也是由收集器决定的。
# DefNew(年轻代),Tenured(年老代),Perm(持久代)

# 年轻代分三个区。一个Eden区，两个Survivor区。大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到 Survivor区（两个中的一个），当这个Survivor区满时，此区的存活对象将被复制到另外一个Survivor区，当这个Survivor去也满了的时候，从第一个Survivor区复制过来的并且此时还存活的对象，将被复制“年老区(Tenured)”。需要注意，Survivor的两个区是对称的，没先后关系，所以同一个区中可能同时存在从Eden复制过来对象，和从前一个Survivor复制过来的对象，而复制到年老区的只有从第一个Survivor去过来的对象。而且，Survivor区总有一个是空的。
# 年老代存放从年轻代存活的对象。一般来说年老代存放的都是生命期较长的对象。
# 持久代用于存放静态文件，如今Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些 class，例如hibernate等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。持久代大小通过-XX:MaxPermSize=<N>进行设置。
Heap
 def new generation   total 4992K, used 134K [0x03a00000, 0x03f60000, 0x08f50000)
  eden space 4480K,   3% used [0x03a00000, 0x03a21b20, 0x03e60000)
  from space 512K,   0% used [0x03e60000, 0x03e60000, 0x03ee0000)
  to   space 512K,   0% used [0x03ee0000, 0x03ee0000, 0x03f60000)
 tenured generation   total 10944K, used 501K [0x08f50000, 0x09a00000, 0x13a00000)
   the space 10944K,   4% used [0x08f50000, 0x08fcd678, 0x08fcd800, 0x09a00000)
 Metaspace       used 1699K, capacity 2242K, committed 2368K, reserved 4480K